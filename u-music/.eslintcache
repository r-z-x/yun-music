[{"F:\\第四阶段\\小U-M+后台\\u-music\\src\\index.js":"1","F:\\第四阶段\\小U-M+后台\\u-music\\src\\pages\\list.js":"2","F:\\第四阶段\\小U-M+后台\\u-music\\src\\util\\axios\\index.js":"3","F:\\第四阶段\\小U-M+后台\\u-music\\src\\views\\search\\index.js":"4","F:\\第四阶段\\小U-M+后台\\u-music\\src\\pages\\play.js":"5"},{"size":412,"mtime":1606314720608,"results":"6","hashOfConfig":"7"},{"size":3200,"mtime":1606399816251,"results":"8","hashOfConfig":"7"},{"size":1210,"mtime":1606399194243,"results":"9","hashOfConfig":"7"},{"size":6073,"mtime":1606397405695,"results":"10","hashOfConfig":"7"},{"size":7640,"mtime":1606401556414,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ypuxfx",{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"F:\\第四阶段\\小U-M+后台\\u-music\\src\\index.js",[],"F:\\第四阶段\\小U-M+后台\\u-music\\src\\pages\\list.js",["23","24","25"],"F:\\第四阶段\\小U-M+后台\\u-music\\src\\util\\axios\\index.js",[],"F:\\第四阶段\\小U-M+后台\\u-music\\src\\views\\search\\index.js",["26","27"],"F:\\第四阶段\\小U-M+后台\\u-music\\src\\pages\\play.js",["28"],"import react from \"react\";\r\nimport qsString from \"querystring\";\r\nimport axios from \"axios\";\r\nimport $ from \"jquery\";\r\nimport \"../assets/css/play.css\";\r\nimport { playUrl, getLyric, songDetail } from \"../util/axios\";\r\nimport Img from \"../assets/img/needle-ip6.png\";\r\n\r\nclass play extends react.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      img: Img,\r\n      songUrl: \"\",\r\n      songDetail: {},\r\n      lyric: \"\",\r\n      playTime: \"00:00\",\r\n      flag: false,\r\n    };\r\n    //创建一个播放器的ref\r\n    this.audio = react.createRef();\r\n    //创建一个播放图表的ref\r\n    this.playIcon = react.createRef();\r\n  }\r\n  componentDidMount() {\r\n    let query = this.props.location.search.slice(1);\r\n    //axios并发处理\r\n    axios\r\n      .all([\r\n        playUrl({\r\n          id: qsString.parse(query).id,\r\n        }),\r\n        getLyric({\r\n          id: qsString.parse(query).id,\r\n        }),\r\n        songDetail({\r\n          ids: qsString.parse(query).id,\r\n        }),\r\n      ])\r\n      .then(\r\n        axios.spread((songUrl, lyric, songDetail) => {\r\n        //   console.log(songUrl, \"songUrl\");\r\n        //   console.log(lyric, \"lyric\");\r\n        //   console.log(songDetail, \"songDetail\");\r\n          if (songUrl.code === 200) {\r\n            this.setState({\r\n              songUrl: songUrl.data[0].url,\r\n            });\r\n          }\r\n          if (lyric.code === 200) {\r\n            /* \r\n              歌词字符串：\r\n              \"[00:00.000] 作词 : 小克  [00:00.780] 作曲 : 林家谦\"\r\n              我想要的形式是：\r\n              00：00 作词 : 小克 \r\n              {\r\n                 \"00：00\"：作词 : 小克 ,\r\n                 \"00:00\": 作曲 : 林家谦\r\n              }\r\n\r\n              */\r\n            let lyricInfo = \"\";\r\n            //   let lyric = lyric.lrc.lyric\r\n            lyricInfo = lyric.lrc.lyric;\r\n            //设定一个正则 取出 []\r\n            let reg = /\\[(.*?)](.*)/g;\r\n            //设定一空对象\r\n            let obj = {};\r\n            //替换 replace\r\n            lyricInfo.replace(reg, (a, b, c) => {\r\n              //[00:00.000] 作词 : 小克 aaaaaaa\r\n              //00:00.000 bbbbbb\r\n              //作词 : 小克 cccccc\r\n              // console.log(a,'aaaaaaa')\r\n              // console.log(b,'bbbbbb')\r\n              // console.log(c,'cccccc')\r\n              b = b.slice(0, 5);\r\n              obj[b] = c;\r\n            });\r\n            this.setState(\r\n              {\r\n                lyric: obj,\r\n              },\r\n              () => {\r\n                //实时监听播放器的变化 ontimeupdate属性\r\n                // console.log(this.audio.current, \"audioDOM\");\r\n                let audio = this.audio.current;\r\n                audio.ontimeupdate = () => {\r\n                  //我想要00：00\r\n                  // console.log(audio.currentTime,'我被监控')\r\n                  let nowTime = this.formateTime(audio.currentTime);\r\n                  //   console.log(this.state.lyric,'this.state.lyric')\r\n                  //剔除掉没有歌词的播放器时间\r\n                  if (nowTime in this.state.lyric) {\r\n                    // console.log(nowTime, \"匹配到的啊啊啊啊啊\");\r\n                    //去设置播放时间\r\n                    this.setState(\r\n                      {\r\n                        playTime: nowTime,\r\n                      },\r\n                      () => {\r\n                        //调取歌词滚动的方法\r\n                        this.moveLyric();\r\n                        // console.log(this.state.playTime, \"匹配到的播放器时间\");\r\n                      }\r\n                    );\r\n                  }\r\n                };\r\n              }\r\n            );\r\n            // console.log(obj, \"整合之后的对象\");\r\n            // this.setState({\r\n            //   lyric: lyric.lrc.lyric,\r\n            // });\r\n          }\r\n          if (songDetail.code === 200) {\r\n            this.setState({\r\n              songDetail: songDetail.songs[0],\r\n            });\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  //封装一个事件格式化的方法\r\n  formateTime(timer) {\r\n    let minutes = (Math.floor(timer / 60) + \"\").padStart(2, \"0\");\r\n    let seconds = (Math.floor(timer % 60) + \"\").padStart(2, \"0\");\r\n    return `${minutes}:${seconds}`;\r\n  }\r\n  //歌词滚动\r\n  moveLyric() {\r\n    /* \r\n      一、知道那一句歌词是高亮\r\n      二、查找高亮所有在位置\r\n      三、比较 offsetTop \r\n      四、发现上移改变translateY\r\n       */\r\n    let active = document.getElementsByClassName(\"active\")[0];\r\n    let index = $(\".geci_box\").children().index(active);\r\n    let offSet = 31;\r\n    if (active.offsetTop > 31) {\r\n      console.log(\"位置发生变化1111\");\r\n      //更改它位置\r\n      $(\".geci_box\").css(\"transform\", `translateY(-${index * offSet}px)`);\r\n    }\r\n    //   console.log(index,'位置')\r\n  }\r\n  //创建一个播放事件\r\n  toPlay() {\r\n    this.setState(\r\n      {\r\n        flag: !this.state.flag,\r\n      },\r\n      () => {\r\n        if (this.state.flag) {\r\n          //如果flag是真 代表暂停 出现图标 ，音乐停止\r\n          this.playIcon.current.style.display = \"block\";\r\n          this.audio.current.pause();\r\n        } else {\r\n          //如果flag是假 代表播放 没有图标 ，音乐正在播放\r\n          this.playIcon.current.style.display = \"none\";\r\n          this.audio.current.play();\r\n        }\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    const { songUrl, songDetail, lyric, img, playTime } = this.state;\r\n    return (\r\n      <div className=\"play\">\r\n        <div className=\"play_top\">\r\n          <img src={img} />\r\n        </div>\r\n        <div className=\"play_img_all\" onClick={this.toPlay.bind(this)}>\r\n          <i ref={this.playIcon} className=\"play_icon\"></i>\r\n          <div className=\"play_img_box\">\r\n            <div className=\"small_img\">\r\n              <img\r\n                src={\r\n                  songDetail.al\r\n                    ? songDetail.al.picUrl\r\n                    : \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1606411625087&di=2bbf863215c4f08f4800ffc03da201da&imgtype=0&src=http%3A%2F%2Fimg9.doubanio.com%2Fview%2Fgroup_topic%2Fl%2Fpublic%2Fp232716766.jpg\"\r\n                }\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"play_txt\">\r\n          <div className=\"play_txt_name\">\r\n            <span>{songDetail.name}</span>-\r\n            {songDetail.ar\r\n              ? songDetail.ar.map((arInfo) => {\r\n                  return <span key={arInfo.id}>{arInfo.name}</span>;\r\n                })\r\n              : \"\"}\r\n          </div>\r\n          <div className=\"play_txt_geci\">\r\n            <div className=\"geci_box\">\r\n              {\r\n                //把对象转化成数组去循环  Object.entries把对象转化成枚举型的数组，类似于for in\r\n                Object.entries(lyric).map((item, idx) => {\r\n                  //   console.log(item,'每一项啊啊啊')\r\n                  if (playTime === item[0]) {\r\n                    return (\r\n                      <p key={idx} className=\"active\">\r\n                        {item[1]}\r\n                      </p>\r\n                    );\r\n                  } else {\r\n                    return <p key={idx}>{item[1]}</p>;\r\n                  }\r\n                })\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"audio_box\">\r\n          <audio ref={this.audio} src={songUrl}  autoPlay></audio>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default play;\r\n",{"ruleId":"29","severity":1,"message":"30","line":24,"column":26,"nodeType":"31","messageId":"32","endLine":24,"endColumn":28},{"ruleId":"33","severity":1,"message":"34","line":42,"column":25,"nodeType":"35","endLine":42,"endColumn":57},{"ruleId":"33","severity":1,"message":"34","line":47,"column":29,"nodeType":"35","endLine":47,"endColumn":91},{"ruleId":"36","severity":1,"message":"37","line":31,"column":9,"nodeType":"38","endLine":31,"endColumn":19},{"ruleId":"36","severity":1,"message":"37","line":32,"column":9,"nodeType":"38","endLine":32,"endColumn":19},{"ruleId":"33","severity":1,"message":"34","line":173,"column":11,"nodeType":"35","endLine":173,"endColumn":28},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression"]